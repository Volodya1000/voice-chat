import io
import torch
import soundfile as sf
from typing import List


class LocalTextToVoiceService:
    """
    –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å TTS (Text-to-Speech) –Ω–∞ –±–∞–∑–µ Silero.
    """

    DEFAULT_LANGUAGE = 'ru'
    DEFAULT_MODEL_ID = 'v4_ru'
    DEFAULT_SAMPLE_RATE = 48000

    def __init__(self,
                 language: str = DEFAULT_LANGUAGE,
                 model_id: str = DEFAULT_MODEL_ID,
                 sample_rate: int = DEFAULT_SAMPLE_RATE):
        self.language = language
        self.model_id = model_id
        self.sample_rate = sample_rate
        self.device = self._select_device()
        self.model = None
        self.speakers: List[str] = []
        self._load_model()

    def _select_device(self) -> torch.device:
        if torch.cuda.is_available():
            print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CUDA (GPU).")
            return torch.device('cuda')
        else:
            print("üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
            return torch.device('cpu')

    def _load_model(self):
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero ({self.model_id})...")
        try:
            self.model, _ = torch.hub.load(
                repo_or_dir='snakers4/silero-models',
                model='silero_tts',
                language=self.language,
                speaker=self.model_id
            )
            self.model.to(self.device)
            self.speakers = self.model.speakers
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∫—Ç–æ—Ä—ã: {self.speakers}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            self.model = None

    def synthesize_to_bytes(self, text: str, speaker: str = 'aidar') -> bytes:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ä–µ—á—å –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤ .wav.
        """
        if not self.model:
            raise RuntimeError("TTS –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        if speaker not in self.speakers:
            raise ValueError(f"–ì–æ–ª–æ—Å '{speaker}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {self.speakers}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
        audio = self.model.apply_tts(
            text=text,
            speaker=speaker,
            sample_rate=self.sample_rate
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ wav (–±–∞–π—Ç—ã)
        buffer = io.BytesIO()
        sf.write(buffer, audio.cpu().numpy(), self.sample_rate, format='WAV')
        buffer.seek(0)
        return buffer.read()
