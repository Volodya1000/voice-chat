import os
import io
import asyncio
import tempfile
from typing import Optional

from fastapi import HTTPException, UploadFile

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install pydub faster-whisper
try:
    from pydub import AudioSegment
    from pydub.exceptions import CouldntDecodeError
    from faster_whisper import WhisperModel
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    class AudioSegment:
        @staticmethod
        def from_file(file): raise NotImplementedError("pydub not installed")


    class CouldntDecodeError(Exception):
        pass


    class WhisperModel:
        def __init__(self, *args, **kwargs): pass

        def transcribe(self, path, language): return [
            type('Segment', (object,), {'text': '–ú–æ–¥–µ–ª—å Whisper –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.'})], None

# ---------------------------------------------------------------------
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø WHISPER
# ---------------------------------------------------------------------

WHISPER_MODEL_SIZE = "small"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –º–æ–¥–µ–ª—å –¥–ª—è CPU
whisper_model: Optional[WhisperModel] = None

try:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Whisper –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –º–æ–¥—É–ª—è
    # –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ DI –ª—É—á—à–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–æ–¥–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    whisper_model = WhisperModel(WHISPER_MODEL_SIZE, device="cpu", compute_type="int8")
    print(f"‚úÖ STT –ú–æ–¥–µ–ª—å {WHISPER_MODEL_SIZE} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU.")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Whisper: {e}")
    # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –º–æ–¥–µ–ª—å –æ—Å—Ç–∞–µ—Ç—Å—è None


# ---------------------------------------------------------------------
# –ö–õ–ê–°–° –°–ï–†–í–ò–°–ê
# ---------------------------------------------------------------------

class TranscriptionService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º faster-whisper.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é pydub –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é.
    """

    def __init__(self, model: Optional[WhisperModel] = whisper_model):
        self.model = model

    async def transcribe_audio(self, audio_file: UploadFile) -> str:
        if not self.model:
            raise HTTPException(status_code=503, detail="Whisper model not loaded or failed to initialize.")

        # –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tempfile –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_audio_file:
            temp_path = temp_audio_file.name

        try:
            # –ß—Ç–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            audio_bytes = await audio_file.read()

            # Pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (MediaRecorder –º–æ–∂–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å WEBM –∏–ª–∏ OGG)
            # –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ WAV, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç Whisper
            audio_segment = AudioSegment.from_file(io.BytesIO(audio_bytes))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
            await asyncio.to_thread(audio_segment.export, temp_path, format="wav")

            # –®–∞–≥ 2: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å faster-whisper
            # –¢–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            segments, _ = await asyncio.to_thread(self.model.transcribe, temp_path, language="ru")
            user_prompt = "".join([segment.text for segment in segments]).strip()

            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {user_prompt}")
            return user_prompt

        except CouldntDecodeError:
            raise HTTPException(status_code=400,
                                detail="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É FFmpeg.")
        except Exception as e:
            # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        finally:
            # –®–∞–≥ 3: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(temp_path):
                os.remove(temp_path)