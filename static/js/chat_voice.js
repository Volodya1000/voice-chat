// chat_voice.js
export async function setupVoiceRecorder(recordButton, voiceIcon, messageInput, loadingIndicator, loadingText, playButton) {
  let mediaRecorder, audioChunks = [], isRecording = false;
  let lastAudioBlob = null; // –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ

  // --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
  const uploadAudio = async () => {
    if (!audioChunks.length) return;

    const audioBlob = new Blob(audioChunks, { type: mediaRecorder.mimeType });
    lastAudioBlob = audioBlob; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    audioChunks = [];

    if (loadingText) loadingText.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª—å—é...';
    if (loadingIndicator) loadingIndicator.style.display = 'flex';
    if (recordButton) recordButton.disabled = true;

    const fd = new FormData();
    fd.append("audio_file", audioBlob, "recording." + mediaRecorder.mimeType.split('/')[1]);

    try {
      const resp = await fetch(`/chats/transcribe_voice`, { method: "POST", body: fd });
      if (loadingIndicator) loadingIndicator.style.display = 'none';
      if (!resp.ok) {
        const err = await resp.json().catch(()=>({detail:resp.statusText}));
        alert(`–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: ${err.detail || resp.statusText}`);
        return;
      }

      const data = await resp.json();
      const transcription = data.content || "";
      if (messageInput) {
        let cur = messageInput.value.trim();
        if (cur.length && transcription.length) cur += ' ';
        messageInput.value = cur + transcription + ' ';
        messageInput.focus();
      }
    } catch (err) {
      if (loadingIndicator) loadingIndicator.style.display = 'none';
      console.error('Error uploading audio', err);
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.");
    } finally {
      if (voiceIcon) voiceIcon.textContent = 'üé§';
      if (recordButton) recordButton.disabled = false;
    }
  };

  // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaRecorder ---
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
    mediaRecorder.ondataavailable = e => { if (e.data.size > 0) audioChunks.push(e.data); };
    mediaRecorder.onstop = uploadAudio;

    if (recordButton) recordButton.disabled = false;
  } catch (err) {
    console.error('Mic access denied', err);
    if (recordButton) {
      recordButton.disabled = true;
      recordButton.title = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.";
    }
  }

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏ ---
  if (recordButton) {
    recordButton.addEventListener('click', () => {
      if (!mediaRecorder || recordButton.disabled) return;

      if (isRecording) {
        mediaRecorder.stop();
        recordButton.classList.remove('recording');
        voiceIcon.textContent = '‚öôÔ∏è';
        isRecording = false;
      } else {
        audioChunks = [];
        mediaRecorder.start();
        recordButton.classList.add('recording');
        voiceIcon.textContent = 'üî¥';
        isRecording = true;
      }
    });
  }

  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞—É–¥–∏–æ ---
  if (playButton) {
    playButton.addEventListener('click', () => {
      if (!lastAudioBlob) {
        alert("–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.");
        return;
      }
      const audioUrl = URL.createObjectURL(lastAudioBlob);
      const audio = new Audio(audioUrl);
      audio.play();
    });
  }
}
